
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jdttdesqckxqcctdjojk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpkdHRkZXNxY2t4cWNjdGRqb2prIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQzNDg0MTksImV4cCI6MjA1OTkyNDQxOX0.1sLhQg_mq0Y4eH5gyFrYxYv1ODdVTUG4pPS7HCRi3bU";

// Initialize Supabase client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: localStorage
  },
  global: {
    // Add sensible fetch timeout
    fetch: (url, options) => {
      const fetchOptions = {
        ...options,
        cache: 'no-store' as RequestCache
      };
      const fetchPromise = fetch(url, fetchOptions);
      const timeoutPromise = new Promise<Response>((_, reject) => {
        setTimeout(() => reject(new Error('Request timeout')), 10000);
      });
      return Promise.race([fetchPromise, timeoutPromise]);
    },
  },
});

// Create the storage bucket for medical documents if it doesn't exist
export const createBucketIfNotExists = async () => {
  try {
    // First check if the bucket already exists
    const { data: buckets, error: listError } = await supabase
      .storage
      .listBuckets();
      
    if (listError) {
      console.log('Error listing buckets (this is normal for new projects):', listError.message);
      return false;
    }
    
    // Check if our bucket exists in the list
    const bucketExists = buckets?.some(bucket => bucket.name === 'medical_documents');
    
    if (!bucketExists) {
      // Create the bucket if it doesn't exist
      const { error: createError } = await supabase
        .storage
        .createBucket('medical_documents', {
          public: false,
          fileSizeLimit: 10485760, // 10MB limit
        });
        
      if (createError) {
        console.log('Note: Could not create medical documents bucket. This is expected for new projects until RLS policies are set up.');
        return false;
      } else {
        console.log('Medical documents bucket created successfully');
        return true;
      }
    } else {
      console.log('Medical documents bucket already exists');
      return true;
    }
  } catch (error) {
    console.log('Error checking for medical documents bucket. This is expected for new projects.');
    return false;
  }
};

// Initialize the bucket, but don't block the app loading
setTimeout(() => {
  createBucketIfNotExists().catch(error => {
    console.log('Failed to create bucket, but continuing app execution:', error);
  });
}, 1000);
